class Solution {
public:
vector<int>adj[30007];
vector<int>sub;
vector<int>dep;
vector<int>sum;
int a;
void dfs(int u,int par=-1){
    sub[u]=1;
    for(auto it:adj[u]){
        if(it==par){
            continue;
        }
        dep[it]= dep[u]+1;
        dfs(it,u);
        sub[u]+=sub[it];
    }
}
void dfs2(int u,int par=-1){
    for(auto it:adj[u]){
        if(it==par){
            continue;
        }
        sum[it]= sum[u]-sub[it]+(a-sub[it]);
        dfs2(it,u);
    }
}
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        a=n;
        sub.resize(n+1);
        dep.resize(n+1);
        sum.resize(n);
        for(auto it:edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        dfs(0);
        for(int i=0;i<n;i++){
            sum[0]+=dep[i];
        }
        dfs2(0);
        return sum;
    }
};